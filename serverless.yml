service: daily-standup-bot

frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  region: ${env:AWS_REGION, 'us-east-1'}
  runtime: go1.x
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource:
      - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.resourcePrefix}-standups
      - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.resourcePrefix}-settings

custom:
  currentStage: ${opt:stage, self:provider.stage}
  resourcePrefix: ${self:service}-${self:custom.currentStage}

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  hello:
    handler: bin/hello
    events:
      - http:
          path: hello
          method: get
  world:
    handler: bin/world
    events:
      - http:
          path: world
          method: get
  webhook:
    handler: bin/webhook
    events:
      - http:
          path: webhook
          method: post
    environment:
      STANDUPS_TABLE: ${self:custom.resourcePrefix}-standups
  start:
    handler: bin/start
    environment:
      STANDUPS_TABLE: ${self:custom.resourcePrefix}-standups
      SETTINGS_TABLE: ${self:custom.resourcePrefix}-settings
  send-questions:
    handler: bin/send_questions
    environment:
      STANDUPS_TABLE: ${self:custom.resourcePrefix}-standups
      SLACK_TOKEN: ${env:SLACK_TOKEN}
  is-all-user-finished:
    handler: bin/is_all_user_finished
    environment:
      STANDUPS_TABLE: ${self:custom.resourcePrefix}-standups

resources: ${file(resources.yml)}

stepFunctions:
  stateMachines:
    dailyStandup:
      definition:
        StartAt: StartState
        States:
          StartState:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.resourcePrefix}-start
            Next: SendQuestionsState
          SendQuestionsState:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.resourcePrefix}-send-questions
            Next: IsAllUserFinishedState
          IsAllUserFinishedState:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.resourcePrefix}-is-all-user-finished
            Next: SwitchWithFinishedState
          SwitchWithFinishedState:
            Type: Choice
            Choices:
              - Variable: "$.finished"
                BooleanEquals: true
                Next: SucceedState
            Default: FilterOutputState
          FilterOutputState:
            Type: Pass
            OutputPath: "$.setting"
            Next: SendQuestionsState
          SucceedState:
            Type: Succeed

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
